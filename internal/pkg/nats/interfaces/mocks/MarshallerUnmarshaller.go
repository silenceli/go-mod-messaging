// Code generated by mockery v2.15.0. DO NOT EDIT.
// note that nats.go will need to be added to the end of the nats import

package mocks

import (
	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"

	types "github.com/silenceli/go-mod-messaging/v3/pkg/types"
)

// MarshallerUnmarshaller is an autogenerated mock type for the MarshallerUnmarshaller type
type MarshallerUnmarshaller struct {
	mock.Mock
}

// Marshal provides a mock function with given fields: v, publishTopic
func (_m *MarshallerUnmarshaller) Marshal(v types.MessageEnvelope, publishTopic string) (*nats.Msg, error) {
	ret := _m.Called(v, publishTopic)

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func(types.MessageEnvelope, string) *nats.Msg); ok {
		r0 = rf(v, publishTopic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.MessageEnvelope, string) error); ok {
		r1 = rf(v, publishTopic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmarshal provides a mock function with given fields: msg, v
func (_m *MarshallerUnmarshaller) Unmarshal(msg *nats.Msg, v *types.MessageEnvelope) error {
	ret := _m.Called(msg, v)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nats.Msg, *types.MessageEnvelope) error); ok {
		r0 = rf(msg, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMarshallerUnmarshaller interface {
	mock.TestingT
	Cleanup(func())
}

// NewMarshallerUnmarshaller creates a new instance of MarshallerUnmarshaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMarshallerUnmarshaller(t mockConstructorTestingTNewMarshallerUnmarshaller) *MarshallerUnmarshaller {
	mock := &MarshallerUnmarshaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
